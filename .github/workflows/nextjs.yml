# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: 'npm'
      
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-modules-
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next
      
      - name: List existing config files
        run: |
          echo "Checking for existing configuration files..."
          if [ -f tailwind.config.js ]; then
            echo "Existing tailwind.config.js:"
            cat tailwind.config.js
          else
            echo "No existing tailwind.config.js found"
          fi
          
          if [ -f postcss.config.js ]; then
            echo "Existing postcss.config.js:"
            cat postcss.config.js
          else
            echo "No existing postcss.config.js found"
          fi
          
          if [ -f next.config.js ]; then
            echo "Existing next.config.js:"
            cat next.config.js
          else
            echo "No existing next.config.js found"
          fi
      
      - name: Install dependencies with exact versions
        run: |
          npm ci
          # Install tailwindcss-animate explicitly
          npm install --save-dev tailwindcss-animate@1.0.7
          # Output installed package versions for debugging
          echo "Installed Tailwind CSS version:"
          npm list tailwindcss
          echo "Installed Tailwind CSS Animate version:"
          npm list tailwindcss-animate
          echo "Installed PostCSS version:"
          npm list postcss
          echo "Installed Autoprefixer version:"
          npm list autoprefixer
      
      - name: Update Next.js config for GitHub Pages
        run: |
          cat > next.config.js << 'EOL'
          /** @type {import('next').NextConfig} */
          const nextConfig = {
            output: 'export',
            basePath: process.env.NODE_ENV === 'production' ? '/cit-clinical' : '',
            assetPrefix: process.env.NODE_ENV === 'production' ? '/cit-clinical/' : '',
            images: {
              unoptimized: true,
            },
            typescript: {
              ignoreBuildErrors: true,
            },
            eslint: {
              ignoreDuringBuilds: true,
            },
            trailingSlash: true,
            experimental: {
              webpackBuildWorker: true,
            },
            distDir: '.next',
            poweredByHeader: false,
            reactStrictMode: false,
            swcMinify: true,
          }
          
          module.exports = nextConfig
          EOL
          cat next.config.js
      
      - name: Set environment variables
        run: |
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_BASE_PATH=/cit-clinical" >> $GITHUB_ENV
          echo "LOCAL_DEV_EMULATION=true" >> $GITHUB_ENV
          # This helps emulate some aspects of dev mode while still building for production
      
      - name: Debug environment
        run: |
          echo "Current directory structure:"
          find . -type f -name "*.css" | sort
          echo "Component and page files:"
          find . -type f \( -name "*.tsx" -o -name "*.ts" \) -not -path "./node_modules/*" | sort
          echo "Package.json:"
          cat package.json
      
      - name: Check globals.css content
        run: |
          echo "Current globals.css content:"
          cat app/globals.css || echo "No globals.css found in app directory"
      
      - name: Create optimized build environment
        run: |
          # Copy the styles into a temporary location to ensure they're not lost
          mkdir -p .styles-backup
          cp -r app/globals.css .styles-backup/ || echo "No globals.css to backup"
          
          # Clean existing build artifacts
          rm -rf .next out
          
          # Create a lighter tailwind config specifically for production builds
          cat > tailwind.prod.config.js << 'EOL'
          /** @type {import('tailwindcss').Config} */
          module.exports = {
            content: [
              './pages/**/*.{js,ts,jsx,tsx,mdx}',
              './components/**/*.{js,ts,jsx,tsx,mdx}',
              './app/**/*.{js,ts,jsx,tsx,mdx}',
            ],
            theme: {
              extend: {
                colors: {
                  background: "hsl(var(--background))",
                  foreground: "hsl(var(--foreground))",
                  card: {
                    DEFAULT: "hsl(var(--card))",
                    foreground: "hsl(var(--card-foreground))"
                  },
                  popover: {
                    DEFAULT: "hsl(var(--popover))",
                    foreground: "hsl(var(--popover-foreground))"
                  },
                  primary: {
                    DEFAULT: "hsl(var(--primary))",
                    foreground: "hsl(var(--primary-foreground))"
                  },
                  secondary: {
                    DEFAULT: "hsl(var(--secondary))",
                    foreground: "hsl(var(--secondary-foreground))"
                  },
                  muted: {
                    DEFAULT: "hsl(var(--muted))",
                    foreground: "hsl(var(--muted-foreground))"
                  },
                  accent: {
                    DEFAULT: "hsl(var(--accent))",
                    foreground: "hsl(var(--accent-foreground))"
                  },
                  destructive: {
                    DEFAULT: "hsl(var(--destructive))",
                    foreground: "hsl(var(--destructive-foreground))"
                  },
                  border: "hsl(var(--border))",
                  input: "hsl(var(--input))",
                  ring: "hsl(var(--ring))",
                  chart: {
                    1: "hsl(var(--chart-1))",
                    2: "hsl(var(--chart-2))",
                    3: "hsl(var(--chart-3))",
                    4: "hsl(var(--chart-4))",
                    5: "hsl(var(--chart-5))",
                  },
                  sidebar: {
                    background: "hsl(var(--sidebar-background))",
                    foreground: "hsl(var(--sidebar-foreground))",
                    primary: "hsl(var(--sidebar-primary))",
                    "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
                    accent: "hsl(var(--sidebar-accent))",
                    "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
                    border: "hsl(var(--sidebar-border))",
                    ring: "hsl(var(--sidebar-ring))",
                  },
                },
                borderRadius: {
                  lg: "var(--radius)",
                  md: "calc(var(--radius) - 2px)",
                  sm: "calc(var(--radius) - 4px)"
                },
                keyframes: {
                  "accordion-down": {
                    from: { height: "0" },
                    to: { height: "var(--radix-accordion-content-height)" }
                  },
                  "accordion-up": {
                    from: { height: "var(--radix-accordion-content-height)" },
                    to: { height: "0" }
                  }
                },
                animation: {
                  "accordion-down": "accordion-down 0.2s ease-out",
                  "accordion-up": "accordion-up 0.2s ease-out"
                }
              }
            },
            safelist: [
              'bg-background', 'text-foreground',
              'bg-primary', 'text-primary', 'text-primary-foreground',
              'bg-secondary', 'text-secondary', 'text-secondary-foreground',
              'bg-accent', 'text-accent', 'text-accent-foreground',
              'bg-muted', 'text-muted', 'text-muted-foreground',
              'border-border', 'ring-ring'
            ],
            plugins: [require("tailwindcss-animate")],
            exclude: [
              '**/node_modules/**',
              '**/.git/**',
              '**/out/**',
              '**/.next/**'
            ]
          }
          EOL
          
          # Create a simplified postcss config optimized for build speed
          cat > postcss.config.js << 'EOL'
          module.exports = {
            plugins: {
              tailwindcss: {
                config: './tailwind.prod.config.js',
              },
              autoprefixer: {},
            },
          }
          EOL
          cat postcss.config.js
          
          # Create .npmrc to disable some features that might slow down the build
          cat > .npmrc << 'EOL'
          fund=false
          audit=false
          save-exact=true
          EOL
          
          # Create an optimization file for Next.js
          mkdir -p .next/cache
          touch .next/cache/next-optimize-css

      - name: Build with Next.js
        run: |
          export NODE_OPTIONS="--max_old_space_size=4096"
          
          # Show progress during build for debugging
          echo "Starting Next.js build process..."
          
          # Use a lightweight build approach
          NEXT_TELEMETRY_DISABLED=1 SKIP_UNNECESSARY_SCANS=true npm run build -- --no-lint
          
          echo "Build completed!"
          
          # Check if CSS files were generated
          echo "CSS files in output:"
          find out -type f -name "*.css" || echo "No CSS files found in output"
          
          if ls out/_next/static/css/*.css 1> /dev/null 2>&1; then
            echo "CSS content sample (first 30 lines):"
            head -n 30 out/_next/static/css/*.css
            
            echo "CSS file size:"
            ls -la out/_next/static/css/*.css
            
            # Check if CSS file is empty or very small
            for cssfile in out/_next/static/css/*.css; do
              filesize=$(stat -c%s "$cssfile")
              echo "CSS file $cssfile size: $filesize bytes"
              if [ "$filesize" -lt 1000 ]; then
                echo "Warning: CSS file $cssfile is suspiciously small!"
              fi
            done
          else
            echo "No CSS files found in the expected location"
          fi
      
      - name: Create script to fix path issues
        run: |
          cat > out/_fix-paths.js << 'EOL'
          const fs = require('fs');
          const path = require('path');
          
          function processHtmlFile(filePath) {
            const content = fs.readFileSync(filePath, 'utf8');
            // Fix paths in HTML files
            const fixedContent = content
              .replace(/href="\/_next\//g, 'href="/cit-clinical/_next/')
              .replace(/src="\/_next\//g, 'src="/cit-clinical/_next/')
              // Also fix any absolute URLs that might be in the CSS
              .replace(/"\/cit-clinical\/cit-clinical\//g, '"/cit-clinical/');
            
            fs.writeFileSync(filePath, fixedContent);
            console.log(`Fixed paths in ${filePath}`);
          }
          
          function processCSSFile(filePath) {
            const content = fs.readFileSync(filePath, 'utf8');
            // Fix paths in CSS files
            const fixedContent = content
              .replace(/url\(\/_next\//g, 'url(/cit-clinical/_next/')
              // Also fix any absolute URLs that might be in the CSS
              .replace(/url\(\/cit-clinical\/cit-clinical\//g, 'url(/cit-clinical/');
            
            fs.writeFileSync(filePath, fixedContent);
            console.log(`Fixed paths in CSS ${filePath}`);
          }
          
          function walkDir(dir) {
            const files = fs.readdirSync(dir);
            
            for (const file of files) {
              const filePath = path.join(dir, file);
              const stat = fs.statSync(filePath);
              
              if (stat.isDirectory()) {
                walkDir(filePath);
              } else if (file.endsWith('.html')) {
                processHtmlFile(filePath);
              } else if (file.endsWith('.css')) {
                processCSSFile(filePath);
              }
            }
          }
          
          walkDir('.');
          console.log('Path fixing complete!');
          EOL
          
          cd out && node _fix-paths.js
      
      - name: Create dev tools script
        run: |
          # Create a script that adds useful development tools to the page
          cat > out/_dev-tools.js << 'EOL'
          // This script adds a small debug panel to the page
          document.addEventListener('DOMContentLoaded', function() {
            const debugPanel = document.createElement('div');
            debugPanel.style.position = 'fixed';
            debugPanel.style.bottom = '10px';
            debugPanel.style.right = '10px';
            debugPanel.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
            debugPanel.style.color = 'white';
            debugPanel.style.padding = '10px';
            debugPanel.style.borderRadius = '5px';
            debugPanel.style.zIndex = '9999';
            debugPanel.style.fontSize = '12px';
            debugPanel.style.maxWidth = '300px';
            debugPanel.style.maxHeight = '200px';
            debugPanel.style.overflow = 'auto';
            
            debugPanel.innerHTML = `
              <h3 style="margin-top: 0; margin-bottom: 5px;">GitHub Pages Build</h3>
              <p>Base Path: /cit-clinical</p>
              <p>Build Time: ${new Date().toISOString()}</p>
              <button id="debug-toggle-styles" style="background: #333; border: 1px solid #666; color: white; padding: 5px; cursor: pointer;">Toggle Styles</button>
            `;
            
            document.body.appendChild(debugPanel);
            
            // Add a toggle for styles
            document.getElementById('debug-toggle-styles').addEventListener('click', function() {
              const stylesheets = document.querySelectorAll('link[rel="stylesheet"]');
              stylesheets.forEach(sheet => {
                sheet.disabled = !sheet.disabled;
              });
            });
          });
          EOL
          
          # Inject this script into the HTML files
          for htmlFile in $(find out -name "*.html"); do
            # Add the script before the closing body tag
            sed -i 's/<\/body>/<script src="\/_dev-tools.js"><\/script><\/body>/g' "$htmlFile"
          done
          
          # Fix the path for GitHub Pages
          for htmlFile in $(find out -name "*.html"); do
            sed -i 's/\/_dev-tools.js/\/cit-clinical\/_dev-tools.js/g' "$htmlFile"
          done
      
      - name: Debug build output
        run: |
          echo "Output directory contents:"
          ls -la out/ || echo "No out directory found"
          
          echo "HTML structure in index.html:"
          grep -A 10 "<body" out/index.html || echo "No body tag found in index.html"
          
          echo "CSS link tags in index.html:"
          grep -o '<link [^>]*rel="stylesheet"[^>]*>' out/index.html || echo "No CSS link tags found in index.html"
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
