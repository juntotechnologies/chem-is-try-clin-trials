# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: 'npm'
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next
      
      - name: Ensure .nojekyll file exists
        run: |
          touch ./public/.nojekyll
          echo "Created .nojekyll file to disable Jekyll processing"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Tailwind CSS and animation plugin
        run: |
          npm install --save-dev tailwindcss@latest autoprefixer@latest postcss@latest tailwindcss-animate@1.0.7
          echo "Installed Tailwind CSS and required plugins"
          npm list tailwindcss
          npm list tailwindcss-animate
      
      - name: Create optimized configs
        run: |
          # Create optimized Next.js config for GitHub Pages
          cat > next.config.js << 'EOL'
          /** @type {import('next').NextConfig} */
          const nextConfig = {
            // Enable static exports for GitHub Pages
            output: 'export',
            
            // Set basePath to match GitHub Pages repository name
            basePath: process.env.NODE_ENV === 'production' ? '/cit-clinical' : '',
            
            // Set assetPrefix for correct asset paths in GitHub Pages
            assetPrefix: process.env.NODE_ENV === 'production' ? '/cit-clinical/' : '',
            
            // Disable server-based image optimization for static export
            images: {
              unoptimized: true,
            },
            
            // Skip type checking and linting during build
            typescript: {
              ignoreBuildErrors: true,
            },
            eslint: {
              ignoreDuringBuilds: true,
            },
            
            // Add trailing slash for consistent paths
            trailingSlash: true,
            
            // Performance optimizations
            swcMinify: true,
            poweredByHeader: false,
            reactStrictMode: false,
          }
          
          module.exports = nextConfig
          EOL
          echo "Created optimized next.config.js for GitHub Pages"
          
          # Create optimized Tailwind config
          cat > tailwind.config.js << 'EOL'
          /** @type {import('tailwindcss').Config} */
          module.exports = {
            content: [
              './app/**/*.{js,ts,jsx,tsx,mdx}',
              './pages/**/*.{js,ts,jsx,tsx,mdx}',
              './components/**/*.{js,ts,jsx,tsx,mdx}',
            ],
            theme: {
              extend: {
                colors: {
                  background: "hsl(var(--background))",
                  foreground: "hsl(var(--foreground))",
                  card: {
                    DEFAULT: "hsl(var(--card))",
                    foreground: "hsl(var(--card-foreground))"
                  },
                  popover: {
                    DEFAULT: "hsl(var(--popover))",
                    foreground: "hsl(var(--popover-foreground))"
                  },
                  primary: {
                    DEFAULT: "hsl(var(--primary))",
                    foreground: "hsl(var(--primary-foreground))"
                  },
                  secondary: {
                    DEFAULT: "hsl(var(--secondary))",
                    foreground: "hsl(var(--secondary-foreground))"
                  },
                  muted: {
                    DEFAULT: "hsl(var(--muted))",
                    foreground: "hsl(var(--muted-foreground))"
                  },
                  accent: {
                    DEFAULT: "hsl(var(--accent))",
                    foreground: "hsl(var(--accent-foreground))"
                  },
                  destructive: {
                    DEFAULT: "hsl(var(--destructive))",
                    foreground: "hsl(var(--destructive-foreground))"
                  },
                  border: "hsl(var(--border))",
                  input: "hsl(var(--input))",
                  ring: "hsl(var(--ring))",
                  chart: {
                    1: "hsl(var(--chart-1))",
                    2: "hsl(var(--chart-2))",
                    3: "hsl(var(--chart-3))",
                    4: "hsl(var(--chart-4))",
                    5: "hsl(var(--chart-5))",
                  },
                  sidebar: {
                    background: "hsl(var(--sidebar-background))",
                    foreground: "hsl(var(--sidebar-foreground))",
                    primary: "hsl(var(--sidebar-primary))",
                    "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
                    accent: "hsl(var(--sidebar-accent))",
                    "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
                    border: "hsl(var(--sidebar-border))",
                    ring: "hsl(var(--sidebar-ring))",
                  },
                },
                borderRadius: {
                  lg: "var(--radius)",
                  md: "calc(var(--radius) - 2px)",
                  sm: "calc(var(--radius) - 4px)"
                },
                keyframes: {
                  "accordion-down": {
                    from: { height: "0" },
                    to: { height: "var(--radix-accordion-content-height)" }
                  },
                  "accordion-up": {
                    from: { height: "var(--radix-accordion-content-height)" },
                    to: { height: "0" }
                  }
                },
                animation: {
                  "accordion-down": "accordion-down 0.2s ease-out",
                  "accordion-up": "accordion-up 0.2s ease-out"
                }
              }
            },
            plugins: [require("tailwindcss-animate")],
          }
          EOL
          echo "Created simplified tailwind.config.js"
          
          # Create optimized PostCSS config
          cat > postcss.config.js << 'EOL'
          module.exports = {
            plugins: {
              tailwindcss: {},
              autoprefixer: {},
            },
          }
          EOL
          echo "Created standard PostCSS config"
      
      - name: Set environment variables
        run: |
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_BASE_PATH=/cit-clinical" >> $GITHUB_ENV
          echo "NEXT_TELEMETRY_DISABLED=1" >> $GITHUB_ENV
      
      - name: Build with Next.js
        run: |
          export NODE_OPTIONS="--max_old_space_size=4096"
          echo "Starting Next.js build..."
          npm run build
          echo "Build completed successfully!"
      
      - name: Optimize for GitHub Pages
        run: |
          # Create script to fix path issues in HTML and CSS files
          cat > out/_fix-paths.js << 'EOL'
          const fs = require('fs');
          const path = require('path');
          
          function processHtmlFile(filePath) {
            const content = fs.readFileSync(filePath, 'utf8');
            const fixedContent = content
              .replace(/href="\/_next\//g, 'href="/cit-clinical/_next/')
              .replace(/src="\/_next\//g, 'src="/cit-clinical/_next/')
              .replace(/"\/cit-clinical\/cit-clinical\//g, '"/cit-clinical/');
            
            fs.writeFileSync(filePath, fixedContent);
            console.log(`Fixed paths in ${filePath}`);
          }
          
          function processCSSFile(filePath) {
            const content = fs.readFileSync(filePath, 'utf8');
            const fixedContent = content
              .replace(/url\(\/_next\//g, 'url(/cit-clinical/_next/')
              .replace(/url\(\/cit-clinical\/cit-clinical\//g, 'url(/cit-clinical/');
            
            fs.writeFileSync(filePath, fixedContent);
            console.log(`Fixed paths in CSS ${filePath}`);
          }
          
          function walkDir(dir) {
            const files = fs.readdirSync(dir);
            
            for (const file of files) {
              const filePath = path.join(dir, file);
              const stat = fs.statSync(filePath);
              
              if (stat.isDirectory()) {
                walkDir(filePath);
              } else if (file.endsWith('.html')) {
                processHtmlFile(filePath);
              } else if (file.endsWith('.css')) {
                processCSSFile(filePath);
              }
            }
          }
          
          walkDir('.');
          console.log('Path fixing complete!');
          EOL
          
          # Ensure .nojekyll exists in the output directory
          touch out/.nojekyll
          
          # Run the path fixing script
          cd out && node _fix-paths.js
      
      - name: Add debug tools to output
        run: |
          # Create a small debug panel script
          cat > out/_debug-panel.js << 'EOL'
          document.addEventListener('DOMContentLoaded', function() {
            const debugPanel = document.createElement('div');
            debugPanel.style.position = 'fixed';
            debugPanel.style.bottom = '10px';
            debugPanel.style.right = '10px';
            debugPanel.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
            debugPanel.style.color = 'white';
            debugPanel.style.padding = '10px';
            debugPanel.style.borderRadius = '5px';
            debugPanel.style.zIndex = '9999';
            debugPanel.style.fontSize = '12px';
            
            debugPanel.innerHTML = `
              <div style="margin-bottom: 8px;">CIT Clinical - GitHub Pages</div>
              <div style="font-size: 10px; opacity: 0.8;">Build: ${new Date().toISOString()}</div>
              <button id="toggle-styles" style="margin-top: 5px; background: #333; border: 1px solid #666; color: white; padding: 4px 8px; cursor: pointer; font-size: 10px;">Toggle CSS</button>
            `;
            
            document.body.appendChild(debugPanel);
            
            document.getElementById('toggle-styles').addEventListener('click', function() {
              document.querySelectorAll('link[rel="stylesheet"]').forEach(sheet => {
                sheet.disabled = !sheet.disabled;
              });
            });
          });
          EOL
          
          # Add script reference to all HTML files
          for htmlFile in $(find out -name "*.html"); do
            sed -i 's/<\/body>/<script src="\/cit-clinical\/_debug-panel.js"><\/script><\/body>/g' "$htmlFile"
          done
      
      - name: Verify output
        run: |
          echo "Verifying build output..."
          echo "Files in output directory:"
          ls -la out/
          
          echo "CSS files generated:"
          find out -type f -name "*.css" | sort
          
          echo "Checking for .nojekyll file:"
          [ -f out/.nojekyll ] && echo "✅ .nojekyll file exists" || echo "❌ .nojekyll file missing"
          
          echo "Checking for critical HTML files:"
          [ -f out/index.html ] && echo "✅ index.html exists" || echo "❌ index.html missing"
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
